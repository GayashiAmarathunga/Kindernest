import React from 'react';
import { View, TextInput, TouchableHighlight } from 'react-native';
import PropTypes from 'prop-types';
import Dot from './Dot';

class PasswordInput extends React.Component {
  renderCells() {
    const {
      value,
      length,
      cellSize,
      cellColor,
      onBlurCellColor,
      cellMargin,
      cellAnimatedOnChangeText,
    } = this.props;

    const cells = [];
    const values = value.split('');
    const l = values.length - 1;
    for (let i = 0; i < length; i += 1) {
      if (i < l)
        cells.push(
          <Dot
            onBlur
            size={cellSize}
            color={cellColor}
            onBlurColor={onBlurCellColor}
            margin={cellMargin}
          />
        );
      else if (i === l) {
        cells.push(
          <Dot
            onBlur
            size={cellSize}
            color={cellColor}
            onBlurColor={onBlurCellColor}
            margin={cellMargin}
            animatedOnChangeText={cellAnimatedOnChangeText}
          />
        );
      } else
        cells.push(
          <Dot
            size={cellSize}
            color={cellColor}
            onBlurColor={onBlurCellColor}
            margin={cellMargin}
          />
        );
    }

    return cells;
  }

  render() {
    const { value, onChangeText, onPress, keyboardType, length, returnKeyType } = this.props;
    let otp;
    return (
      <TouchableHighlight
        underlayColor="transparent"
        onPress={() => {
          otp.focus();
          onPress();
        }}
      >
        <View>
          <TextInput
            display="none"
            ref={component => {
              otp = component;
            }}
            value={value}
            onChangeText={onChangeText}
            maxLength={length}
            keyboardType={keyboardType}
            returnKeyType={returnKeyType}
          />
          <View
            style={{
              flexDirection: 'row',
              justifyContent: 'center',
              alignItems: 'center',
            }}
          >
            {this.renderCells()}
          </View>
        </View>
      </TouchableHighlight>
    );
  }
}

PasswordInput.propTypes = {
  value: PropTypes.string.isRequired,
  onChangeText: PropTypes.func.isRequired,
  onPress: PropTypes.func,
  length: PropTypes.number,
  keyboardType: PropTypes.string,
  cellSize: PropTypes.number,
  cellColor: PropTypes.string,
  onBlurCellColor: PropTypes.string,
  cellMargin: PropTypes.number,
  cellAnimatedOnChangeText: PropTypes.func,
  returnKeyType: PropTypes.string,
};

PasswordInput.defaultProps = {
  onPress: () => {},
  length: 6,
  keyboardType: 'numeric',
  returnKeyType: 'done',
  cellSize: 12,
  cellColor: '#B2B2B2',
  onBlurCellColor: '#03a9f4',
  cellMargin: 5,
  cellAnimatedOnChangeText: () => {
    return 1;
  },
};
export default PasswordInput;
